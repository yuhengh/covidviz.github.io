{"version":3,"sources":["http.js","App.js","serviceWorker.js","index.js"],"names":["CovidService","api","fetch","json","this","getData","summaryData","stateData","ca","filter","item","state","map","date","positive","caInc","positiveIncrease","ny","nyInc","usData","us","usInc","death","name","data","summary","MockCovidService","service","App","useState","setData","useEffect","a","getAll","res","fetchData","options","title","text","xAxis","labels","formatter","v","value","toString","substring","tickInterval","plotOptions","line","dataLabels","enabled","enableMouseTracking","series","optionsCA","optionsNY","optionsUS","className","highcharts","Highcharts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.804ee3a9.chunk.js","sourcesContent":["const SERVER = 'https://covidtracking.com/api/'\n\nclass CovidService {\n    async getData(api) {\n        return (await fetch(`${SERVER}${api}`)).json();\n    }\n\n    async getAll() {\n        const summaryData = (await this.getData('us'))[0];\n        // console.log(summaryData);\n        \n        const stateData = await this.getData('states/daily');\n        // console.log(stateData);\n        const ca = stateData.filter(item => item.state === 'CA').map(item => [item.date, item.positive]);\n        const caInc = stateData.filter(item => item.state === 'CA').map(item => [item.date, item.positiveIncrease]);\n\n        const ny = stateData.filter(item => item.state === 'NY').map(item => [item.date, item.positive]);\n        const nyInc = stateData.filter(item => item.state === 'NY').map(item => [item.date, item.positiveIncrease]);\n        \n        const usData = await this.getData('us/daily');\n        // console.log(usData);\n        const us = usData.map(item => [item.date, item.positive]);\n        const usInc = usData.map(item => [item.date, item.positiveIncrease]);\n\n        const {positive, death} = summaryData;\n        \n        return {\n            ca: [{name: 'CA', data: ca}, {name: 'CA Inc', data: caInc}],\n            ny: [{name: 'NY', data: ny}, {name: 'NY Inc', data: nyInc}],\n            us: [{name: 'US', data: us}, {name: 'US Inc', data: usInc}],\n            summary: {positive, death},\n        };\n    }\n}\n\nclass MockCovidService {\n    async getData(api) {\n        return [{\n            state: 'CA',\n            date: 20200326,\n            positive: 123,\n        },\n        {\n            state: 'CA',\n            date: 20200327,\n            positive: 143,\n        },\n        {\n            state: 'CA',\n            date: 20200328,\n            positive: 133,\n        }\n    ];\n    }\n\n    async getData2(api) {\n        return [{\n            date: 20200306,\n            positive: 123,}\n        ];\n    }\n}\n\nexport const service = new CovidService();\nexport const mockService = new MockCovidService();","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport {service} from './http';\n\nfunction App() {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await service.getAll();\n    setData(res);\n    }\n    fetchData();\n  }, []);\n\n  const options = {\n    title: {\n      text: ''\n    },\n    xAxis: {\n      // type: 'datetime',\n      labels: {\n        formatter: function() {\n          const v = this.value.toString();\n          return v.substring(0, 4) + '-' + v.substring(4, 6) + '-' + v.substring(6, 8)}\n      },\n\n      tickInterval: 1,\n    },\n    plotOptions: {\n      line: {\n          dataLabels: {\n              enabled: true\n          },\n          enableMouseTracking: false\n      }\n  },\n    series: []\n  };\n\n  const optionsCA = {...options, series: data.ca, title: {\n    text: 'CA'\n  }};\n  const optionsNY = {...options, series: data.ny, title: {\n    text: 'NY'\n  }};\n  const optionsUS = {...options, series: data.us, title: {\n    text: 'US'\n  }};\n\n  return (\n    <div className=\"App\">\n    <h1>Corona Virus Chart</h1>\n    {data.summary && <div><h2>Positive: {data.summary.positive}</h2> <h2>Death: {data.summary.death}</h2></div>}\n      <HighchartsReact\n    highcharts={Highcharts}\n    options={optionsCA}\n  />\n  <HighchartsReact\n    highcharts={Highcharts}\n    options={optionsNY}\n  />\n  <HighchartsReact\n    highcharts={Highcharts}\n    options={optionsUS}\n  />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}